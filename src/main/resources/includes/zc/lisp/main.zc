@include<lisp/runtime.zc>
@include<lisp/parser.zc>

fn main(): int {
     val mem = makeAutoMemory(10000*sizeof<Cons>);
     val context = createRuntimeContext(mem);


     # assume this function will be generated by compiler
     evalProgram(context);

     if (entryValue(context.retainedSubGraphsStackEntry) != nil) {
        println("Not empty retained environments stack found!");
        crash(503);
     }

     freeRuntimeContext(context);
     freeAutoMemory(mem);
     return 0;
}

fn globalExceptionsHandler(globalExpressionResult: CallResult) {
    if (globalExpressionResult.err != nil) {
        print("exception occured");
        printCons(cast<[void]>(globalExpressionResult.err));
        endline();
        crash(100000);
    }

    lispPrint(globalExpressionResult.ok);
}