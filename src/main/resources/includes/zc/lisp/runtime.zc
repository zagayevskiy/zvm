@include<lisp/automem.zc>
@include<lisp/rbtree.zc>


# struct alias for Cons for typesafe error handling
struct StackTrace {
    var i0: int;
    var i1: int;
    var b: byte;
}

# struct alias for Cons to return typesafe result
struct CallResult {
    var ok: Cons;
    var err: StackTrace;
    var flags: byte;
}

# LispEnv struct
# (Dict . OuterLispEnv)
# retainedSubGraphsStackEntry is a key-value pair with linked-list based stack value contains all child envs
struct LispRuntimeContext {
    var mem: AutoMemory;
    var globalEnv: Cons;
    var atomT: Cons;
    var retainedSubGraphsStackEntry: Cons;
    var reusableCallResult: CallResult;
}

fn createRuntimeContext(mem: AutoMemory): LispRuntimeContext {
    val context: LispRuntimeContext = alloc(sizeof<LispRuntimeContext>);

    context.mem = mem;
    context.globalEnv = createEnv(mem, nil);
    context.atomT = makeAtom(mem, "T");

    val globalDict = envDict(context.globalEnv);
    context.retainedSubGraphsStackEntry = putRbTree(mem, globalDict, makeAtom(mem, "retained env refs stack"), nil, ::compare);
    val reusableCallResult = cons(mem, nil, nil);
    context.reusableCallResult = cast<[void]>(reusableCallResult);
    putRbTree(mem, globalDict, makeAtom(mem, "reusable call result"), reusableCallResult, ::compare);

    fillGlobalWithStandardFunctions(context);

    return context;
}

fn freeRuntimeContext(context: LispRuntimeContext) {
    free(context);
}

fn createEnv(mem: AutoMemory, outerEnv: Cons): Cons {
    val dict: Cons = cast<[void]>(makeRbTree(mem));
    return cons(mem, dict, outerEnv);
}

fn envDict(env: Cons): RbTree {
    return cast<[void]>(car(env));
}

fn envOuterEnv(env: Cons): Cons {
    return cdr(env);
}

fn envLookup(env: Cons, key: Cons): Cons {
    var found: Cons = nil;
    var currentEnv = env;
    while (found == nil && currentEnv != nil) {
        found = findTree(envDict(currentEnv).root, key, ::compare);
        currentEnv = envOuterEnv(currentEnv);
    }

    return found;
}

fn fillGlobalWithStandardFunctions(context: LispRuntimeContext) {
    val dict = envDict(context.globalEnv);
    val mem = context.mem;
    val atomT = context.atomT;

    dictPut(mem, dict, atomT, atomT);

    putNamedLambda(mem, dict, "+", ::lispPlus, true);
    putNamedLambda(mem, dict, "-", ::lispMinus, true);
    putNamedLambda(mem, dict, "*", ::lispMul, true);
    putNamedLambda(mem, dict, "%", ::lispMod, true);
    putNamedLambda(mem, dict, "/", ::lispDiv, true);

    # we want compare functions to be lazy so them need to eval args themselves
    putNamedLambda(mem, dict, "=", ::lispEq, false);
    putNamedLambda(mem, dict, "<", ::lispStrictlyAscOrder, false);
    putNamedLambda(mem, dict, ">", ::lispStrictlyDescOrder, false);
    putNamedLambda(mem, dict, "<=", ::lispAscOrder, false);
    putNamedLambda(mem, dict, ">=", ::lispDescOrder, false);


    # we also want logical 'or' and 'and' to be lazy
    putNamedLambda(mem, dict, "||", ::lispOr, false);
    putNamedLambda(mem, dict, "&&", ::lispAnd, false);

    putNamedLambda(mem, dict, "nil?", ::lispIsNil, true);
    putNamedLambda(mem, dict, "number?", ::lispIsNumber, true);
    putNamedTcoLambda(mem, dict, "cond", ::lispTcoCond, false);

    putNamedLambda(mem, dict, "quote", ::lispQuote, false);
    putNamedLambda(mem, dict, "def!", ::lispDef, false);
    putNamedLambda(mem, dict, "defun!", ::lispDefun, false);
    putNamedLambda(mem, dict, "panic!", ::lispPanic, true);
    putNamedLambda(mem, dict, "fn*", ::lispLambda, false);
    putNamedLambda(mem, dict, "\*", ::lispLambda, false);
    putNamedTcoLambda(mem, dict, "let*", ::lispTcoLet, false);

    putNamedLambda(mem, dict, "eval", ::lispEval, true);
    putNamedLambda(mem, dict, "reverse-inplace!", ::lispMutReverseInPlace, true);
    putNamedLambda(mem, dict, "list", ::lispList, true);
    putNamedLambda(mem, dict, "cons", ::lispCons, true);
    putNamedLambda(mem, dict, "try*", ::lispTryCatch, false);
    putNamedLambda(mem, dict, "throw!", ::lispThrow, false);

    putNamedLambda(mem, dict, "car", ::lispCar, true);
    putNamedLambda(mem, dict, "cdr", ::lispCdr, true);
    putNamedLambda(mem, dict, "caar", ::lispCaar, true);
    putNamedLambda(mem, dict, "cadr", ::lispCadr, true);
    putNamedLambda(mem, dict, "cdar", ::lispCdar, true);
    putNamedLambda(mem, dict, "cddr", ::lispCddr, true);
    putNamedLambda(mem, dict, "caaar", ::lispCaaar, true);
    putNamedLambda(mem, dict, "caadr", ::lispCaadr, true);
    putNamedLambda(mem, dict, "cadar", ::lispCadar, true);
    putNamedLambda(mem, dict, "cdaar", ::lispCdaar, true);
    putNamedLambda(mem, dict, "caddr", ::lispCaddr, true);
    putNamedLambda(mem, dict, "cddar", ::lispCddar, true);
    putNamedLambda(mem, dict, "cdadr", ::lispCdadr, true);
    putNamedLambda(mem, dict, "cdddr", ::lispCdddr, true);

    putNamedLambda(mem, dict, "map", ::lispMap, true);
}

fn heuristicGc(context: LispRuntimeContext) {
    val mem = context.mem;
    if (2 * mem.available < mem.allocated) {
        printAutoMemoryInfo(mem);
        gc(mem, context.globalEnv);
        endline();
        printAutoMemoryInfo(mem);
    }
}

fn ok(context: LispRuntimeContext, ok: Cons): CallResult {
    val result = context.reusableCallResult;
    result.ok = ok;
    result.err = nil;
    return result;
}

fn err(context: LispRuntimeContext, trace: StackTrace): CallResult {
    val result = context.reusableCallResult;
    result.ok = nil;
    result.err = trace;
    return result;

}
# Stack Trace Entry is list node:
# ( (fn . message) . parent)
fn appendStackTrace(context: LispRuntimeContext, where: Cons, message: [byte], parent: StackTrace): StackTrace {
    val mem = context.mem;
    var msg: Cons = nil;
    if (message != nil) {
        msg = makeAtom(mem, message);
    }
    return cast<[void]>(cons(mem, cons(mem, where, msg), cast<[void]>(parent)));
}

fn eval(context: LispRuntimeContext, env: Cons, enterSexpr: Cons): CallResult {
    var currentEnv = env;
    var sexpr = enterSexpr;

    retainSubGraph(context, currentEnv);

    while(true) {
#        print("eval ");
#        printCons(sexpr);
#        endline();
        val sexprType = getType(sexpr);
        if (sexprType == CT_NIL || sexprType == CT_INT) {
            releaseSubGraph(context, currentEnv);
            return ok(context, sexpr);
        }
        if (sexprType == CT_ATOM) {
            releaseSubGraph(context, currentEnv);
            return ok(context, envLookup(currentEnv, sexpr));
        }

        heuristicGc(context);

        if (sexprType == CT_LIST) {
            val unevaluatedF = car(sexpr);
            val fEvalResult = eval(context, currentEnv, unevaluatedF);
            if (fEvalResult.err != nil) {
                releaseSubGraph(context, currentEnv);
                return err(context, appendStackTrace(context, unevaluatedF, "evaluating lambda value", fEvalResult.err));
            }
            val f = fEvalResult.ok;
            val args = cdr(sexpr);
            val regularFnRef = tryGetRegularFnRef(f);
            if (regularFnRef != nil) {
                val callResult = callRegularLambda(context, regularFnRef, isEvalArgs(f), currentEnv, args);
                if (callResult.err != nil) {
                    releaseSubGraph(context, currentEnv);
                    return err(context, appendStackTrace(context, unevaluatedF, nil, callResult.err));
                }
                if (isTcoLambda(f)) {
                    val result = callResult.ok;
                    sexpr = car(result);
                    val newEnv = cdr(result);
                    if (newEnv != currentEnv) {
                        releaseSubGraph(context, currentEnv);
                        retainSubGraph(context, newEnv);
                        currentEnv = newEnv;
                    }
                } else {
                    releaseSubGraph(context, currentEnv);
                    return callResult;
                }
            } else if (isUserDefinedLambda(f)) {
                 val callResult = evalUserDefinedLambda(context, currentEnv, f, args);
                 if (callResult.err != nil) {
                    releaseSubGraph(context, currentEnv);
                    return err(context, appendStackTrace(context, unevaluatedF, nil, callResult.err));
                 }
                 val bodyAndEnv = callResult.ok;
                sexpr = car(bodyAndEnv);
                val newEnv = cdr(bodyAndEnv);
                if (newEnv != currentEnv) {
                    releaseSubGraph(context, currentEnv);
                    retainSubGraph(context, newEnv);
                    currentEnv = newEnv;
                }
            } else {

                # TODO may be throw?..
                print("Unknown function in expression ");
                printCons(sexpr);
                crash(404);
            }
        }
    }

    # TODO may be throw?..
    crashm(123, "unknown argument");
}

fn mapEval(context: LispRuntimeContext, currentEnv: Cons, list: Cons): CallResult {
    var result: Cons = nil;
    var resultCursor = result;
    val mem = context.mem;
    for (var cursor = list; getType(cursor) != CT_NIL; cursor = cdr(cursor)) {
        val current = car(cursor);
        val evalResult = eval(context, currentEnv, current);
        if (evalResult.err != nil) {
            if (result != nil) {
                releaseSubGraph(context, result);
            }
            return evalResult;
        }
        val nextCons = cons(mem, evalResult.ok, nil);
        if (result == nil) {
            result = nextCons;
            resultCursor = result;
            retainSubGraph(context, result);
        } else {
            resultCursor.right = nextCons;
            resultCursor = resultCursor.right;
        }
    }
    if (result != nil) {
        releaseSubGraph(context, result);
    }

    return ok(context, result);
}

fn putNamedLambda(mem: AutoMemory, dict: RbTree, name: [byte], nativeFunction: (LispRuntimeContext, Cons, Cons) -> CallResult, evalArgs: bool) {
    dictPut(mem, dict, makeAtom(mem, name), makeRegularLambda(mem, nativeFunction, evalArgs, false));
}

fn putNamedTcoLambda(mem: AutoMemory, dict: RbTree, name: [byte], nativeFunction: (LispRuntimeContext, Cons, Cons) -> CallResult, evalArgs: bool) {
     dictPut(mem, dict, makeAtom(mem, name), makeRegularLambda(mem, nativeFunction, evalArgs, true));
 }

const REGULAR_LAMBDA_CHECK_MASK = 1431655765; # 0b01010101010101010101010101010101

# returns regular function reference
# or nil if passed cons does not represents regular function reference
fn tryGetRegularFnRef(mayBeLambda: Cons): (LispRuntimeContext, Cons, Cons) -> CallResult {
    if (getType(mayBeLambda) != CT_INT) return nil;
    val mayBeFnRef = cast<int>(mayBeLambda.left);
    val check = cast<int>(mayBeLambda.right) ^ REGULAR_LAMBDA_CHECK_MASK;
    if (mayBeFnRef != check) return nil;
    return cast<(LispRuntimeContext, Cons, Cons) -> CallResult>(mayBeFnRef);
}

# CT_INT = ( nativeFunctionAddress . nativeFunctionAddress^REGULAR_LAMBDA_CHECK_MASK )
fn makeRegularLambda(mem: AutoMemory, nativeFunction: (LispRuntimeContext, Cons, Cons) -> CallResult, evalArgs: bool, tco: bool): Cons {
    val nativeFunctionAddress = cast<int>(nativeFunction);
    val nativeFunctionAddressCheck = nativeFunctionAddress ^ REGULAR_LAMBDA_CHECK_MASK;
    val lambda = makeCons(mem, cast<[void]>(nativeFunctionAddress), cast<[void]>(nativeFunctionAddressCheck), CT_INT);
    setEvalArgs(lambda, evalArgs);
    setTcoLambda(lambda, tco);
    return lambda;
}

const USER_DEFINED_LAMBDA_CHECK_MASK = 858993459; # 0b00110011001100110011001100110011
# ( (binds body) . (outerEnv . outerEnv^USER_DEFINED_LAMBDA_CHECK_MASK) )
fn makeUserDefinedLambda(context: LispRuntimeContext, outerEnv: Cons, definition: Cons): CallResult {
    val binds = car(definition);
    val body = cdar(definition);
    if (getType(cddr(definition)) != CT_NIL) {
        # TODO may be throw?..
        println("must be exact two params - binds and body");
        return nil;
    }
    for (var cursor = binds; getType(cursor) != CT_NIL; cursor = cdr(cursor)) {
        val bind = car(cursor);
        if (getType(bind) != CT_ATOM) {
            printCons(bind);
            println(" can not be used as bind param");
            return nil;
        }
    }
    val mem = context.mem;
    val check = makeNumber(mem, cast<int>(outerEnv) ^ USER_DEFINED_LAMBDA_CHECK_MASK);

    return ok(context, cons(mem, definition, cons(mem, outerEnv, check)));
}

fn isUserDefinedLambda(mayBeLambda: Cons): bool {
    if (getType(mayBeLambda) != CT_LIST) return false;
    val mayBeOuterEnvAndCheck = cdr(mayBeLambda);
    if (getType(mayBeOuterEnvAndCheck) != CT_LIST) return false;
    val mayBeOuterEnv = car(mayBeOuterEnvAndCheck);
    val mayBeOuterEnvCheck = cdr(mayBeOuterEnvAndCheck);
    if (getType(mayBeOuterEnvCheck) != CT_INT) return false;
    return cast<int>(mayBeOuterEnv) == (getInt(mayBeOuterEnvCheck) ^ USER_DEFINED_LAMBDA_CHECK_MASK);
}

fn evalUserDefinedLambda(context: LispRuntimeContext, env: Cons, lambda: Cons, args: Cons): CallResult {
    val outerEnv = cdar(lambda);
    val definition = car(lambda);
    val binds = car(definition);
    val body = cdar(definition);
    val mem = context.mem;
    val lambdaEnv = createEnv(mem, outerEnv);
    retainSubGraph(context, lambdaEnv);
    val dict = envDict(lambdaEnv);

    var argsCursor = args;
    for (var cursor = binds; getType(cursor) != CT_NIL; cursor = cdr(cursor)) {
        val bind = car(cursor);
        var arg: Cons;
        if (getType(argsCursor) == CT_LIST) {
            val evalResult = eval(context, env, car(argsCursor));
            if (evalResult.err != nil) {
                releaseSubGraph(context, lambdaEnv);
                return evalResult;
            }
            arg = evalResult.ok;
            argsCursor = cdr(argsCursor);
        } else {
            arg = nil;
        }
        dictPut(mem, dict, bind, arg);
    }
    releaseSubGraph(context, lambdaEnv);

    return ok(context, cons(mem, body, lambdaEnv));
}

fn callRegularLambda(context: LispRuntimeContext, nativeFunction: (LispRuntimeContext, Cons, Cons) -> CallResult, evalArgs: bool, env: Cons, args: Cons): CallResult {
    val argsType = getType(args);
    if (argsType != CT_LIST && argsType != CT_NIL) {
        # TODO may be throw?..
        print("list or nil expected as args");
        crash(5);
    }

    var actualArgs: Cons;
    if (evalArgs) {
        val evalResult = mapEval(context, env, args);
        if (evalResult.err != nil) return evalResult;
        actualArgs = evalResult.ok;
    } else {
        actualArgs = args;
    }

    return nativeFunction(context, env, actualArgs);
}

fn dictPut(mem: AutoMemory, dict: RbTree, key: Cons, value: Cons): Cons {
    return putRbTree(mem, dict, key, value, ::compare);
}

fn setEvalArgs(lambda: Cons, evalArgs: bool) {
    setUserBit1(lambda, evalArgs);
}

fn isEvalArgs(lambda: Cons): bool {
    return userBit1(lambda);
}

fn setTcoLambda(lambda: Cons, tco: bool) {
    setUserBit2(lambda, tco);
}

fn isTcoLambda(lambda: Cons): bool {
    return userBit2(lambda);
}

fn retainSubGraph(context: LispRuntimeContext, subGraph: Cons) {
    if (subGraph == context.globalEnv) return;
    val stackEntry = context.retainedSubGraphsStackEntry;
    setEntryValue(stackEntry, cons(context.mem, subGraph, entryValue(stackEntry)));
}

fn releaseSubGraph(context: LispRuntimeContext, subGraph: Cons) {
    if (subGraph == context.globalEnv) return;
    val stackEntry = context.retainedSubGraphsStackEntry;
    setEntryValue(stackEntry, cdr(entryValue(stackEntry)));
}

fn peekEnv(context: LispRuntimeContext): Cons {
    return car(entryValue(context.retainedSubGraphsStackEntry));
}

fn lispPrint(cons: Cons) {
    val regularFnRef = tryGetRegularFnRef(cons);
    if (regularFnRef != nil) {
        print("built-in function ::");
        # TODO may be traverse global scope to recognize it name
        printi(cast<int>(regularFnRef));
        endline();
    } else if (isUserDefinedLambda(cons)) {
        println("lambda");
    } else {
        printCons(cons);
        endline();
    }
}

@include<lisp/std_fns.zc>