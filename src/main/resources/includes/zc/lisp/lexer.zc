@include<std/mem.zc>

# user free to capture token.data pointer because it WILL NOT be released
# user can call cast<[byte]>(token.data) in case of LTT_STRING and LTT_ATOM
# user must call free(token.data) in case of LTT_STRING and LTT_ATOM when data no more needed
# user can call cast<int>(token.data) in cast of LTT_INT
# user must not release LispToken obtained by lispLexerNext(..) manually
struct LispToken {
    var type: byte; # see LTT_* const
    var data: [void];
    var reusable: bool;
}

struct LispLexerContext {
    var text: [byte];
    var textLength: int;
    var cursor: int;
    var current: byte;
    var tokenCurlyBraceOpen: LispToken;
    var tokenCurlyBraceClose: LispToken;
    var tokenDot: LispToken;
    var tokenEot: LispToken;
    var currentToken: LispToken;
}

const LTT_CBO: byte = 40; # symbol (
const LTT_CBC: byte = 41; # symbol )
const LTT_DOT: byte = 46; # symbol .
const LTT_STRING: byte = 34; # "any string"
const LTT_ATOM: byte = 1; # identifier
const LTT_EOT: byte = 3; # end of text
const LTT_INT: byte = 30;

fn lispLexerCreate(text: [byte]): LispLexerContext {
    val context: LispLexerContext = alloc(sizeof<LispLexerContext>);
    val textLength = stringLength(text);
    context.text = alloc(textLength + sizeof<int>);
    context.textLength = stringLength(text);
    context.cursor = 0;
    context.current = charAt(text, 0);
    context.tokenCurlyBraceOpen = lispTokenCreate(LTT_CBO, nil,  true);
    context.tokenCurlyBraceClose = lispTokenCreate(LTT_CBC, nil, true);
    context.tokenDot = lispTokenCreate(LTT_DOT, nil, true);
    context.tokenEot = lispTokenCreate(LTT_EOT, nil, true);
    return context;
}

fn lispTokenCreate(type: byte, data: [byte], reusable: bool): LispToken {
    val token: LispToken = alloc(sizeof<LispToken>);
    token.type = type;
    token.data = data;
    token.reusable = reusable;
    return token;
}

fn lispTokenFree(token: LispToken) {
    if (token.reusable) return;
    free(token);
}

fn lispLexerFree(context: LispLexerContext) {
    if (context.currentToken != nil) lispTokenFree(context.currentToken);
    free(context.tokenCurlyBraceOpen);
    free(context.tokenCurlyBraceClose);
    free(context.tokenDot);
    free(context.tokenEot);
    free(context);
}

fn lispLexerNext(context: LispLexerContext): LispToken {
    if (context.textLength >= context.cursor) return context.tokenEot;
    if (context.currentToken != nil) lispTokenFree(context.currentToken);

    while(listLexerIsWhitespace(context.current)) {
        lispLexerNext(context);
    }

    var result: LispToken;
    val current = context.current;
    when (current) {
        LTT_CBO -> result = context.tokenCurlyBraceOpen;
        LTT_CBC -> result = context.tokenCurlyBraceClose;
        LTT_DOT -> result = context.tokenDot;
        LTT_STRING -> result = lispLexerConsumeString(context);
        else -> if (lispLexerIsDigit(current)) {
            result = lispLexerConsumeInt(context);
        } else {
            result = lispLexerTryConsumeAtom(context);
        }
    }
    if (result == nil) {
        print("unknown character code");
        crash(cast<int>(context.current));
    }
    context.currentToken = result;

    return result;
}

fn lispLexerIsDigit(char: byte): bool {
    return char >= LTT_INT && char <= LTT_INT + 9;
}

fn listLexerNext(context: LispLexerContext) {
    val nextCursor = context.cursor + 1;
    context.cursor = nextCursor;
    context.current = charAt(context.text, nextCursor);
}

fn lispLexerConsumeInt(context: LispLexerContext): LispToken {
    var result: int = context.current;
    lispLexerNext(context);
    while(lispLexerIsDigit(context.current)) {
        result = result * 10;
        result = result + context.current;
        lispLexerNext(context);
    }

    return lispTokenCreate(LTT_INT, cast<[void]>(result), false);
}

fn lispLexerConsumeString(context: LispLexerContext): LispToken {
    lispLexerNext(context); # skip first "

    val stringBase = context.cursor;
    while(context.current != LTT_STRING) {
        lispLexerNext(context);
    }
    val string = newSubString(context.text, stringBase, context.cursor);

    lispLexerNext(context); # skip last "

    return lispTokenCreate(LTT_STRING, string, false);
}

fn lispLexerTryConsumeAtom(context: LispLexerContext): LispToken {
    val idBase = context.cursor;
    while(lispLexerIsAtomChar(context.current)) {
        lispLexerNext(context);
    }
    if (context.cursor == idBase) return nil; # so it's not id...

    return lispTokenCreate(LTT_ATOM, newSubString(context.text, idBase, context.cursor), false);
}

fn lispLexerIsAtomChar(char: byte): bool {
    return stringContainsChar(char, "1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-+*/%!?=<>&|");
}

fn listLexerIsWhitespace(char: byte): bool {
    when(char) {
        32 -> return true; # SPACE
        10 -> return true; # LF
        13 -> return true; # CR
        9 -> return true; # TAB
    }

    return false;
}