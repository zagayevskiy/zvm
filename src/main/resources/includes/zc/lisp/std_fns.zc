fn lispDef(context: LispRuntimeContext, env: Cons, args: Cons): Cons {
    val key = car(args);
    val evaluatedValue = eval(context, env, cdar(args));
    dictPut(context.mem, envDict(env), key, evaluatedValue);
    return evaluatedValue;
}

fn lispLambda(context: LispRuntimeContext, env: Cons, args: Cons): Cons {
    return makeUserDefinedLambda(context, env, args);
}

#
# (let*
#       (key1 value1 key2 value2 ... keyN valueN)
#       body
# )
#
# this is TCO fn so it returns (resultBody . newEnv)
fn lispTcoLet(context: LispRuntimeContext, env: Cons, args: Cons): Cons {
    var bindings = car(args);
    if (getType(bindings) == CT_NIL) {
        print("let* with empty bindings list does not make sens.");
    }

    val resultBody = cdar(args);
    if (resultBody == nil) {
        print("let* without body does not make sens. Nil returned.");
        return cons(context.mem, nil, env);
    }

    val mem = context.mem;
    val letEnv = createEnv(mem, env);
    val letEnvDict = envDict(letEnv);

    while(getType(bindings) != CT_NIL) {
        val tail = cdr(bindings);
        dictPut(mem, letEnvDict, car(bindings), eval(context, letEnv, car(tail)));
        bindings = cdr(tail);
    }

    return cons(mem, resultBody, letEnv);
}

# (cond
#       (condition1 result1)
#       (condition2 result2)
#       ...
#       (conditionN resultN)
# )
# (conditionX resultX) is equivalent to (conditionX . resultX)
#
# this is TCO fn so it returns (resultBody . env)
fn lispTcoCond(context: LispRuntimeContext, env: Cons, args: Cons): Cons {
    for (var cursor = args; getType(cursor) != CT_NIL; cursor = cdr(cursor)) {
        val case = car(cursor);
        val condition = car(case);
        if (getType(eval(context, env, condition)) != CT_NIL) {
            var tmp = cdr(case);
            if (getType(tmp) == CT_LIST) {
                tmp = car(tmp);
            }
            return cons(context.mem, tmp, env);
        }
    }

    return nil;
}

fn lispPanic(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    println("panic!");
    printCons(args);
    crash(0);
}

fn lispPlus(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    var current = car(args);
    assertType(current, CT_INT, "int expected as 1st arg of +");
    var result= getInt(current);
    for (var tail = cdr(args); getType(tail) != CT_NIL; tail = cdr(tail)) {
        current = car(tail);
        assertType(current, CT_INT, "ints expected as args of +");
        result = result + getInt(current);
    }

    return makeNumber(context.mem, result);
}

# this fn result calculation based on count of args
# (- x y1 y2 ... yN) equals to x - y1 - y2 - ... - yN
# (- x) is -x
fn lispMinus(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    var current = car(args);
    assertType(current, CT_INT, "int expected as 1st arg of -");
    var result = getInt(current);
    var tail = cdr(args);
    if (getType(tail) == CT_NIL) {
        result = 0 - result;
    }
    for ( ; getType(tail) != CT_NIL; tail = cdr(tail)) {
        current = car(tail);
        assertType(current, CT_INT, "ints expected as args of -");
        result = result - getInt(current);
    }

    return makeNumber(context.mem, result);
}

fn lispMul(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    var current = car(args);
    assertType(current, CT_INT, "int expected as 1st arg of *");
    var result= getInt(current);
    for (var tail = cdr(args); getType(tail) != CT_NIL; tail = cdr(tail)) {
        current = car(tail);
        assertType(current, CT_INT, "ints expected as args of *");
        result = result * getInt(current);
    }

    return makeNumber(context.mem, result);
}

fn lispEq(context: LispRuntimeContext, env: Cons, args: Cons): Cons {
    val first = eval(context, env, car(args));
    for (var next = cdr(args); getType(next) != CT_NIL; next = cdr(next)) {
        if (compare(first, eval(context, env, car(next))) != 0) return nil;
    }

    return context.atomT;
}

# (< x1 x2 ... xN) means that x1 < x2 < ... < xN
fn lispStrictlyAscOrder(context: LispRuntimeContext, env: Cons, args: Cons): Cons {
    var prev = eval(context, env, car(args));
    for (var cursor = cdr(args); getType(cursor) != CT_NIL; cursor = cdr(cursor)) {
          val current = eval(context, env, car(cursor));
          if (compare(prev, current) >= 0) return nil;
          prev = current;
    }

    return context.atomT;
}

# (<= x1 x2 ... xN) means that x1 <= x2 <= ... <= xN
fn lispAscOrder(context: LispRuntimeContext, env: Cons, args: Cons): Cons {
    var prev = eval(context, env, car(args));
    for (var cursor = cdr(args); getType(cursor) != CT_NIL; cursor = cdr(cursor)) {
          val current = eval(context, env, car(cursor));
          if (compare(prev, current) > 0) return nil;
          prev = current;
    }

    return context.atomT;
}

# (> x1 x2 ... xN) means that x1 > x2 > ... > xN
fn lispStrictlyDescOrder(context: LispRuntimeContext, env: Cons, args: Cons): Cons {
    var prev = eval(context, env, car(args));
    for (var cursor = cdr(args); getType(cursor) != CT_NIL; cursor = cdr(cursor)) {
          val current = eval(context, env, car(cursor));
          if (compare(prev, current) <= 0) return nil;
          prev = current;
    }

    return context.atomT;
}

# (>= x1 x2 ... xN) means that x1 >= x2 >= ... >= xN
fn lispDescOrder(context: LispRuntimeContext, env: Cons, args: Cons): Cons {
    var prev = eval(context, env, car(args));
    for (var cursor = cdr(args); getType(cursor) != CT_NIL; cursor = cdr(cursor)) {
          val current = eval(context, env, car(cursor));
          if (compare(prev, current) < 0) return nil;
          prev = current;
    }

    return context.atomT;
}

# returns first non-nil operand or nil if hasn't
fn lispOr(context: LispRuntimeContext, env: Cons, args: Cons): Cons {
    for (var cursor = args; getType(cursor) != CT_NIL; cursor = cdr(cursor)) {
        val operand = eval(context, env, car(cursor));
        if (getType(operand) != CT_NIL) {
            return operand;
        }
    }

    return nil;
}

# returns T if all operands non-nil or nil otherwise
fn lispAnd(context: LispRuntimeContext, env: Cons, args: Cons): Cons {
    for (var cursor = args; getType(cursor) != CT_NIL; cursor = cdr(cursor)) {
        val operand = eval(context, env, car(cursor));
        if (getType(operand) == CT_NIL) {
            return nil;
        }
    }

    return context.atomT;
}

fn lispIsNil(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    if (getType(car(args)) == CT_NIL && getType(cdr(args)) == CT_NIL) {
        return context.atomT;
    }

    return nil;
}

fn lispIsNumber(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    if (getType(car(args)) == CT_INT && getType(cdr(args)) == CT_NIL) {
        return context.atomT;
    }

    return nil;
}

fn lispQuote(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    return car(args);
}

fn lispList(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    return args;
}

fn lispCons(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    return cons(context.mem, car(args), cdar(args));
}

fn lispCar(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    return car(car(args));
}

fn lispCdr(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    return cdr(car(args));
}

fn lispCaar(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    return caar(car(args));
}

fn lispCadr(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    return cadr(car(args));
}

fn lispCdar(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    return cdar(car(args));
}

fn lispCddr(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    return cddr(car(args));
}

fn lispCaaar(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    return caaar(car(args));
}

fn lispCaadr(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    return caadr(car(args));
}

fn lispCadar(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    return cadar(car(args));
}

fn lispCdaar(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    return cdaar(car(args));
}

fn lispCaddr(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    return caddr(car(args));
}

fn lispCddar(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    return cddar(car(args));
}

fn lispCdadr(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    return cdadr(car(args));
}

fn lispCdddr(context: LispRuntimeContext, unusedEnv: Cons, args: Cons): Cons {
    return cdddr(car(args));
}