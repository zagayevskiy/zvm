@include<container/arraystack.zc>

struct RuntimeFunction {
    var address: int;
    var argsMemorySize: int;
}

struct Context {
    var bytecode: [byte];
    var bytecodeSize: int;
    var operandsStack: Stack;
    var callStack: Stack;
    var functions: [RuntimeFunction];
    var functionsCount: int;
    var globals: [void];
    var ip: int;
    var localsStackBaseAddress: [void];
    var sp: [void];
    var constantPool: [void];
}

struct ProgramInfo {
    var mainIndex: int;
    var functionsTable: [RuntimeFunction];
    var functionsTableSize: int;
    var constantPool: [byte];
    var constantPoolSize: int;
    var bytecode: [byte];
    var bytecodeSize: int;
}

fn createContext(info: ProgramInfo): Context {
    val result: Context = alloc(sizeof<Context>);
    result.bytecode = info.bytecode;
    result.bytecodeSize = info.bytecodeSize;
    result.operandsStack = createStack(65536);
    result.callStack = createStack(65536);
    result.functions = info.functionsTable;
    result.functionsCount = info.functionsTableSize;
    result.ip = 0;
    result.localsStackBaseAddress = alloc(65536);
    result.sp = result.localsStackBaseAddress;
    result.constantPool = info.constantPool;

    return result;
}
