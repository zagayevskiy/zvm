
@include<std/assert.zc>
@include<std/mem.zc>
@include<std/io.zc>
@include<container/arraystack.zc>

@include<zvm/context.zc>
@include<zvm/bytecode_parser.zc>
@include<zvm/stackframe.zc>

fn vmRunLoop(context: Context): int {
    val bytecodeSize = context.bytecodeSize;
    val table = createOpcodesTable();
    val offsettedTable = table + 128*sizeof<(Context) -> void>;

    while(context.ip < bytecodeSize) {
        val code = nextByte(context);
        val f = offsettedTable[code];
        if (f != nil) {
            f(context);
        } else if (code == 2) {
           if(context.callStack.top == 4) {
               when(context.operandsStack.top) {
                   sizeof<byte> -> {
                       free(table);
                       return popByte(context.operandsStack);
                   }
                   sizeof<int> -> {
                       free(table);
                       return popInt(context.operandsStack);
                   }
                   else -> crash(context.operandsStack.top);
               }
           }
           ret(context);
       } else {
           println("unknown opcode");
           crash(code);
       }
    }

    free(table);
    return 0;
}

fn call(context: Context, functionIndex: int) {
    val function = context.functions[functionIndex];
    val sp = context.sp;
    val argsMemorySize = function.argsMemorySize;
    if (argsMemorySize != 0) {
        context.sp = sp + argsMemorySize;
        val operandsStack = context.operandsStack;
        copy(operandsStack.stack + (operandsStack.top - argsMemorySize), sp, argsMemorySize);
        drop(operandsStack, argsMemorySize);
    }
    var frame = createStackFrame(context.sp, sp, context.ip);
    pushStackFrame(context.callStack, frame);
    context.ip = function.address;
}

fn invoke(context: Context) {
    val functionIndex = popInt(context.operandsStack);
    if (functionIndex < 0 || functionIndex >= context.functionsCount) crash(404);
    call(context, functionIndex);
}

fn ret(context: Context) {
    val frame = popStackFrame(context.callStack);
    context.sp = frame.previousStackPointer;
    context.ip = frame.returnAddress;
    freeStackFrame(frame);
}

fn jmp(context: Context) {
    jump(context, nextInt(context));
}

fn jump(context: Context, address: int) {
    context.ip = address;
}

fn jz(context: Context) {
    val address = nextInt(context);
    val argument = popByte(context.operandsStack);
    if (argument == 0) jump(context, address);
}
fn jnz(context: Context) {
    val address = nextInt(context);
    val argument = popByte(context.operandsStack);
    if (argument != 0) jump(context, address);
}

fn popb(context: Context) { popByte(context.operandsStack); }
fn dupb(context: Context) { pushByte(context.operandsStack, peekByte(context.operandsStack)); }
fn popi(context: Context) { popInt(context.operandsStack); }
fn dupi(context: Context) { pushInt(context.operandsStack, peekInt(context.operandsStack)); }
fn pushfp(context: Context) { pushInt(context.operandsStack, cast<int>(peekStackFrame(context.callStack).framePointer)); }

fn addStackPointer(context: Context, value: int) {
    context.sp = context.sp + value;
}

fn itob(context: Context) {
    pushByte(context.operandsStack, cast<byte>(popInt(context.operandsStack)));
}
fn btoi(context: Context) {
    pushInt(context.operandsStack, cast<int>(popByte(context.operandsStack)));
}

fn addsp(context: Context) { addStackPointer(context, nextInt(context)); }
fn incspi(context: Context) { addStackPointer(context, 4); }
fn decspi(context: Context) { addStackPointer(context, -4); }
fn incspb(context: Context) { addStackPointer(context, 1); }
fn decspb(context: Context) { addStackPointer(context, -1); }

fn pushcp(context: Context) { pushInt(context.operandsStack, cast<int>(context.constantPool)); }

fn itoj(context: Context) { return; }
fn btoj(context: Context) { return; }
fn stoj(context: Context) { return; }

fn lstori(context: Context) {
    cast<[int]>(peekStackFrame(context.callStack).framePointer + nextInt(context))[0] = popInt(context.operandsStack);
}
fn lloadi(context: Context) {
    pushInt(context.operandsStack, cast<[int]>(peekStackFrame(context.callStack).framePointer + nextInt(context))[0]);
}
fn mstori(context: Context) {
    val stack = context.operandsStack;
    val argument = popInt(stack);
    val offset = popInt(stack);
    val address = popInt(stack);
    cast<[int]>(offset + address)[0] = argument;
}
fn mloadi(context: Context) {
    val stack = context.operandsStack;
    val offset = popInt(stack);
    val address = popInt(stack);
    pushInt(stack, cast<[int]>(offset + address)[0]);
}

fn gloadi(context: Context) { return; }
fn gstori(context: Context) { return; }

fn lstorb(context: Context) {
    cast<[byte]>(peekStackFrame(context.callStack).framePointer)[nextInt(context)] = popByte(context.operandsStack);
}
fn lloadb(context: Context) {
    pushByte(context.operandsStack, cast<[byte]>(peekStackFrame(context.callStack).framePointer)[nextInt(context)]);
}
fn mstorb(context: Context) {
    val stack = context.operandsStack;
    val argument = popByte(stack);
    val offset = popInt(stack);
    val address = popInt(stack);
    cast<[byte]>(address)[offset] = argument;
}
fn mloadb(context: Context) {
    val stack = context.operandsStack;
    val offset = popInt(stack);
    val address = popInt(stack);
    pushByte(stack, cast<[byte]>(address)[offset]);
}

fn consti(context: Context) {
    pushInt(context.operandsStack, nextInt(context));
}

fn addi(context: Context) {
    val stack = context.operandsStack;
    pushInt(stack, popInt(stack) + popInt(stack));
}
fn subi(context: Context) {
    val stack = context.operandsStack;
    val right = popInt(stack);
    val left = popInt(stack);
    pushInt(stack, left - right);
}
fn inci(context: Context) {
    val stack = context.operandsStack;
    pushInt(stack, popInt(stack) + 1);
}
fn deci(context: Context) {
    val stack = context.operandsStack;
    pushInt(stack, popInt(stack) - 1);
}
fn muli(context: Context) {
    val stack = context.operandsStack;
    pushInt(stack, popInt(stack) * popInt(stack));
}
fn divi(context: Context) {
    val stack = context.operandsStack;
    val right = popInt(stack);
    val left = popInt(stack);
    pushInt(stack, left / right);
}
fn modi(context: Context) {
    val stack = context.operandsStack;
    val right = popInt(stack);
    val left = popInt(stack);
    pushInt(stack, left % right);
}
fn xori(context: Context) {
    val stack = context.operandsStack;
    pushInt(stack, popInt(stack) ^ popInt(stack));
}
fn andi(context: Context) {
    val stack = context.operandsStack;
    pushInt(stack, popInt(stack) & popInt(stack));
}
fn ori(context: Context) {
    val stack = context.operandsStack;
    pushInt(stack, popInt(stack) | popInt(stack));
}
fn noti(context: Context) {
    val stack = context.operandsStack;
    pushInt(stack, ~popInt(stack));
}

fn shli(context: Context) {
    val stack = context.operandsStack;
    val right = popInt(stack);
    val left = popInt(stack);
    pushInt(stack, left << right);
}
fn shri(context: Context) {
    val stack = context.operandsStack;
    val right = popInt(stack);
    val left = popInt(stack);
    pushInt(stack, left >> right);
}
fn cmpi(context: Context) {
    val stack = context.operandsStack;
    val right = popInt(stack);
    val left = popInt(stack);
    pushByte(stack, compareInts(left, right));
}
fn cmpic(context: Context) {
    val stack = context.operandsStack;
    pushByte(stack, compareInts(popInt(stack), nextInt(context)));
}
fn lessi(context: Context) {
    val stack = context.operandsStack;
    val right = popInt(stack);
    val left = popInt(stack);
    pushByte(stack, cast<byte>(left < right));
}
fn leqi(context: Context) {
    val stack = context.operandsStack;
    val right = popInt(stack);
    val left = popInt(stack);
    pushByte(stack, cast<byte>(left <= right));
}
fn greati(context: Context) {
    val stack = context.operandsStack;
    val right = popInt(stack);
    val left = popInt(stack);
    pushByte(stack, cast<byte>(left > right));
}
fn greqi(context: Context) {
    val stack = context.operandsStack;
    val right = popInt(stack);
    val left = popInt(stack);
    pushByte(stack, cast<byte>(left >= right));
}
fn eqi(context: Context) {
    val stack = context.operandsStack;
    val right = popInt(stack);
    val left = popInt(stack);
    pushByte(stack, cast<byte>(left == right));
}
fn neqi(context: Context) {
    val stack = context.operandsStack;
    val right = popInt(stack);
    val left = popInt(stack);
    pushByte(stack, cast<byte>(left != right));
}
fn rndi(context: Context) {
    asm {"
        rndi
        ret
    "}
}

fn pushb(context: Context) {
    pushByte(context.operandsStack, nextByte(context));
}

fn addb(context: Context) {
    val stack = context.operandsStack;
    pushByte(stack, popByte(stack) + popByte(stack));
}
fn subb(context: Context) {
    val stack = context.operandsStack;
    val right = popByte(stack);
    val left = popByte(stack);
    pushByte(stack, left - right);
}
fn mulb(context: Context) {
    val stack = context.operandsStack;
    pushByte(stack, popByte(stack) * popByte(stack));
}
fn divb(context: Context) {
    val stack = context.operandsStack;
    val right = popByte(stack);
    val left = popByte(stack);
    pushByte(stack, left / right);
}
fn modb(context: Context) {
    val stack = context.operandsStack;
    val right = popByte(stack);
    val left = popByte(stack);
    pushByte(stack, left % right);
}
fn xorb(context: Context) {
    val stack = context.operandsStack;
    pushByte(stack, popByte(stack) ^ popByte(stack));
}
fn andb(context: Context) {
    val stack = context.operandsStack;
    pushByte(stack, popByte(stack) & popByte(stack));
}
fn orb(context: Context) {
    val stack = context.operandsStack;
    pushByte(stack, popByte(stack) | popByte(stack));
}
fn notb(context: Context) {
    val stack = context.operandsStack;
    pushByte(stack, ~popByte(stack));
}
fn cmpb(context: Context) {
    val stack = context.operandsStack;
    val right = popByte(stack);
    val left = popByte(stack);
    pushInt(stack, compareBytes(left, right));
}
fn cmpbc(context: Context) {
    val stack = context.operandsStack;
    pushInt(stack, compareBytes(popByte(stack), nextByte(context)));
}
fn lessb(context: Context) {
    val stack = context.operandsStack;
    pushByte(stack, cast<byte>(popByte(stack) > popByte(stack)));
}
fn leqb(context: Context) {
    val stack = context.operandsStack;
    pushByte(stack, cast<byte>(popByte(stack) >= popByte(stack)));
}
fn greatb(context: Context) {
    val stack = context.operandsStack;
    pushByte(stack, cast<byte>(popByte(stack) < popByte(stack)));
}
fn greqb(context: Context) {
    val stack = context.operandsStack;
    pushByte(stack, cast<byte>(popByte(stack) <= popByte(stack)));
}
fn eqb(context: Context) {
    val stack = context.operandsStack;
    pushByte(stack, cast<byte>(popByte(stack) == popByte(stack)));
}
fn neqb(context: Context) {
    val stack = context.operandsStack;
    pushByte(stack, cast<byte>(popByte(stack) != popByte(stack)));
}
fn lnotb(context: Context) {
    val stack = context.operandsStack;
    pushByte(stack, cast<byte>(!popByte(stack)));
}
fn gloadb(context: Context) { return; }
fn gstorb(context: Context) { return; }

fn doOut(context: Context) {
    out(popInt(context.operandsStack));
}

fn doAlloc(context: Context) {
    val stack = context.operandsStack;
    pushInt(stack, cast<int>(alloc(popInt(stack))));
}

fn doFree(context: Context) {
    free(cast<[void]>(popInt(context.operandsStack)));
}

fn doCrash(context: Context) {
    crash(popInt(context.operandsStack));
}

fn doCall(context: Context) {
    call(context, nextInt(context));
}

fn memcp(context: Context) {
    val stack = context.operandsStack;
    val count = popInt(stack);
    val dst = cast<[void]>(popInt(stack));
    val src = cast<[void]>(popInt(stack));
    copy(src, dst, count);
}

fn nextInt(context: Context): int {
    val bytecode = context.bytecode;
    val ip = context.ip;
    val result = cast<[int]>(bytecode + ip)[0];
    context.ip = ip + 4;
    return result;
}

fn nextByte(context: Context): byte {
    val value = context.bytecode[context.ip];
    context.ip = context.ip + 1;
    return value;
}



fn out(address: int) {
    asm{"
        lloadi address
        out
    "}
}



fn compareBytes(left: byte, right: byte): byte {
    if (left == right) {
        return 0;
    } else if (left < right) {
        return -1;
    } else {
        return 1;
    }
}

fn compareInts(left: int, right: int): byte {
    if (left == right) {
        return cast<byte>(0);
    } else if (left < right) {
        return cast<byte>(-1);
    } else {
        return cast<byte>(1);
    }
}


fn createOpcodesTable(): [(Context) -> void] {
    val bytesSize = 256*sizeof<(Context) -> void>;
    val table: [(Context) -> void] = alloc(bytesSize);
    memset(table, bytesSize, 0);

    table[1 + 128] = ::doCall;
    table[3 + 128] = ::jmp;
    table[4 + 128] = ::jz;
    table[5 + 128] = ::jnz;
    table[6 + 128] = ::doCrash;
    table[7 + 128] = ::invoke;

    table[10 + 128] = ::popb;
    table[11 + 128] = ::dupb;
    table[12 + 128] = ::popi;
    table[13 + 128] = ::dupi;
    table[14 + 128] = ::pushfp;
    table[15 + 128] = ::addsp;
    table[16 + 128] = ::incspi;
    table[17 + 128] = ::decspi;
    table[18 + 128] = ::incspb;
    table[19 + 128] = ::decspb;
    table[20 + 128] = ::pushcp;

    table[21 + 128] = ::itob;
    table[22 + 128] = ::btoi;
    table[23 + 128] = ::itoj;
    table[24 + 128] = ::btoj;
    table[25 + 128] = ::stoj;

    table[41 + 128] = ::lstori;
    table[42 + 128] = ::lloadi;
    table[43 + 128] = ::mstori;
    table[44 + 128] = ::mloadi;
    table[45 + 128] = ::consti;
    table[46 + 128] = ::addi;
    table[47 + 128] = ::subi;
    table[48 + 128] = ::inci;
    table[49 + 128] = ::deci;
    table[50 + 128] = ::muli;
    table[51 + 128] = ::divi;
    table[52 + 128] = ::modi;
    table[53 + 128] = ::xori;
    table[54 + 128] = ::andi;
    table[55 + 128] = ::ori;
    table[56 + 128] = ::noti;
    table[57 + 128] = ::shli;
    table[58 + 128] = ::shri;
    table[59 + 128] = ::cmpi;
    table[60 + 128] = ::cmpic;
    table[61 + 128] = ::lessi;
    table[62 + 128] = ::leqi;
    table[63 + 128] = ::greati;
    table[64 + 128] = ::greqi;
    table[65 + 128] = ::eqi;
    table[66 + 128] = ::neqi;
    table[67 + 128] = ::rndi;
    table[68 + 128] = ::gloadi;
    table[69 + 128] = ::gstori;

    table[-41 + 128] = ::lstorb;
    table[-42 + 128] = ::lloadb;
    table[-43 + 128] = ::mstorb;
    table[-44 + 128] = ::mloadb;
    table[-45 + 128] = ::pushb;
    table[-46 + 128] = ::addb;
    table[-47 + 128] = ::subb;
    table[-48 + 128] = ::mulb;
    table[-49 + 128] = ::divb;
    table[-50 + 128] = ::modb;
    table[-51 + 128] = ::xorb;
    table[-52 + 128] = ::andb;
    table[-53 + 128] = ::orb;
    table[-54 + 128] = ::notb;
    table[-55 + 128] = ::cmpb;
    table[-56 + 128] = ::cmpbc;
    table[-57 + 128] = ::lessb;
    table[-58 + 128] = ::leqb;
    table[-59 + 128] = ::greatb;
    table[-60 + 128] = ::greqb;
    table[-61 + 128] = ::eqb;
    table[-62 + 128] = ::neqb;
    table[-63 + 128] = ::lnotb;
    table[-64 + 128] = ::gloadb;
    table[-65 + 128] = ::gstorb;

    table[-10 + 128] = ::doOut;
    table[-11 + 128] = ::doAlloc;
    table[-12 + 128] = ::doFree;
    table[-13 + 128] = ::memcp;
#
#    for (var i = 0; i < 256; i = i + 1) {
#        printi(i);
#        print("(");
#        printi(i - 128);
#        print(") = ::");
#        printi(cast<int>(table[i]));
#        endline();
#    }

    return table;
}