program ::= top_level_definition { EOL { EOL } top_level_definition }

top_level_definition ::= struct | function

struct ::= "struct" "{" struct_declaration_list "}"
struct_declaration_list ::= variable_declaration { EOL variable_declaration }

function ::= "fn" identifier "(" function_args_list ")" [":" return_type] function_body
function_body ::= function_block_body | function_expression_body
function_block_body ::= block
function_expression_body ::= "=" expression
function_args_list ::= [ function_arg_definition {"," function_arg_definition} ]
function_arg_definition ::= identifier ":" identifier
return_type ::= identifier

block ::= "{" statement { EOL statement } "}"
statement ::= variable_declaration | loop | function_return_statement | expression

variable_declaration ::= var_declaration | val_declaration
var_declaration ::= "var" identifier ((":" identifier) ["=" expression]| ("=" expression))
val_declaration ::= "val" identifier [":" identifier] "=" expression

function_return_statement ::= "return" expression
loop ::= for_loop | while_loop
for_loop ::= "for" "(" "..." ")" block
while_loop ::= "while" "(" expression ")" block

expression ::= if_else_expr | (conjunction_expr { "||" conjunction_expr })
if_else_expr ::= "if" "(" expression ")" (block | expression) [ "else" (block | expression) ]

conjunction_expr ::= bit_or_expr { "&&" bit_or_expr }

bit_or_expr ::= bit_xor_expr { "|" bit_xor_expr }

bit_xor_expr ::= bit_and_expr { "^" bit_and_expr }

bit_and_expr ::= equality_expr { "&" equality_expr }

equality_expr ::= comparison_expr { ("==" | "!=") comparison_expr }

comparison_expr ::= bit_shift_expr { (">" | "<" | ">="| "<=") bit_shift_expr }

bit_shift_expr ::= addition_expr { (">>" | "<<") addition_expr }

addition_expr ::= multiplication_expr { ("+" | "-") multiplication_expr }

multiplication_expr ::= unary_expr { "*" | "/" | "%" unary_expr }

unary_expr ::= [( "~" | "!" | "@")] value_expr

value_expr ::= const |
	"(" expression ")" [chain] |
	identifier ("=" expression | [chain]) |
    //TODO lambda syntax
	
expressions_list ::= expression { "," expression }

chain ::= function_call | array_indexing | struct_field_dereference

function_call ::= "(" expressions_list ")" [chain]
array_indexing ::= "[" expression "]" ("=" expression | [chain])
struct_field_dereference ::= "." identifier ("=" expression | [chain])