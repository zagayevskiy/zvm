program ::= top_level_definition { top_level_definition }

top_level_definition ::= struct | function

struct ::= "struct" "{" struct_declaration_list "}"
struct_declaration_list ::= struct_field_declaration { struct_field_declaration }
struct_field_declaration ::= var_declaration ";"

function ::= "fn" identifier "(" function_args_list ")" [":" function_return_type] function_body
function_body ::= function_block_body | function_expression_body
function_block_body ::= block
function_expression_body ::= "=" expression
function_args_list ::= [ function_arg_definition {"," function_arg_definition} ]
function_arg_definition ::= identifier ":" type
function_return_type ::= type
function_return_statement ::= "return" expression ";"

type ::= identifier | functional_type | array_type
functional_type ::= "(" [ type { ", " type } ] ")" "->" type
array_type ::= "[" type "]"

block ::= "{" statement { statement } "}"
statement ::= block | variable_declaration | loop | if_else | function_return_statement | expression_statement | asm

asm ::= "asm" "{" asm_body "}"
asm_body ::= string_const

variable_declaration ::= (var_declaration | val_declaration) ";"
var_declaration ::= "var" identifier ((":" identifier) ["=" expression]| ("=" expression))
val_declaration ::= "val" identifier [":" identifier] "=" expression

loop ::= for_loop | while_loop
for_loop ::= "for" "(" [for_loop_initializer] ";" [for_loop_condition] ";" [for_loop_step] ")" statement
for_loop_initializer ::= variable_declaration {"," variable_declaration}
for_loop_condition ::= expression
for_loop_step ::= expression {"," expression}

if_else ::= "if" "(" expression ")" statement [ "else" statement ]

while_loop ::= "while" "(" expression ")" statement

expression_statement ::= expression ";"
expression ::=  disjunction_expr

disjunction_expr ::= conjunction_expr [ "||" disjunction_expr ]

conjunction_expr ::= bit_or_expr [ "&&" conjunction_expr ]

bit_or_expr ::= bit_xor_expr [ "|" bit_or_expr ]

bit_xor_expr ::= bit_and_expr [ "^" bit_xor_expr ]

bit_and_expr ::= equality_expr [ "&" bit_and_expr ]

equality_expr ::= comparison_expr [ ("==" | "!=") equality_expr ]

comparison_expr ::= bit_shift_expr [ (">" | "<" | ">="| "<=") comparison_expr ]

bit_shift_expr ::= addition_expr [ (">>" | "<<") bit_shift_expr ]

addition_expr ::= multiplication_expr [ ("+" | "-") addition_expr ]

multiplication_expr ::= unary_expr [ "*" | "/" | "%" multiplication_expr ]

unary_expr ::= [( "~" | "!" | "*")] value_expr

value_expr ::= const | parenthesis_expr | assignment_expr | sizeof_operator | cast_operator//TODO lambda syntax

parenthesis_expr ::= "(" expression ")" [chain]

assignment_expr ::= identifier ("=" expression | [chain])

sizeof_operator ::= "sizeof" "<" type ">"
cast_operator ::= "cast" "<" type ">" "(" expression ")" [chain]

expressions_list ::= expression { "," expression }

chain ::= function_call | array_indexing | struct_field_dereference

function_call ::= "(" expressions_list ")" [chain]
array_indexing ::= "[" expression "]" ("=" expression | [chain])
struct_field_dereference ::= "." identifier ("=" expression | [chain])
string_const ::= "'"*"'" | "\""*"\""